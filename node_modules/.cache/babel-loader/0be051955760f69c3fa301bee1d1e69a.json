{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst OBJECT_STORE_NAME = 'cache-entries';\n\nconst normalizeURL = unNormalizedUrl => {\n  const url = new URL(unNormalizedUrl, location.href);\n  url.hash = '';\n  return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\n\n\nclass CacheTimestampsModel {\n  /**\n   *\n   * @param {string} cacheName\n   *\n   * @private\n   */\n  constructor(cacheName) {\n    this._cacheName = cacheName;\n    this._db = new DBWrapper(DB_NAME, 1, {\n      onupgradeneeded: event => this._handleUpgrade(event)\n    });\n  }\n  /**\n   * Should perform an upgrade of indexedDB.\n   *\n   * @param {Event} event\n   *\n   * @private\n   */\n\n\n  _handleUpgrade(event) {\n    const db = event.target.result; // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n    // have to use the `id` keyPath here and create our own values (a\n    // concatenation of `url + cacheName`) instead of simply using\n    // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n\n    const objStore = db.createObjectStore(OBJECT_STORE_NAME, {\n      keyPath: 'id'\n    }); // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n    // create a single index with the keyPath `['cacheName', 'timestamp']`\n    // instead of doing both these indexes.\n\n    objStore.createIndex('cacheName', 'cacheName', {\n      unique: false\n    });\n    objStore.createIndex('timestamp', 'timestamp', {\n      unique: false\n    }); // Previous versions of `workbox-expiration` used `this._cacheName`\n    // as the IDBDatabase name.\n\n    deleteDatabase(this._cacheName);\n  }\n  /**\n   * @param {string} url\n   * @param {number} timestamp\n   *\n   * @private\n   */\n\n\n  async setTimestamp(url, timestamp) {\n    url = normalizeURL(url);\n    const entry = {\n      url,\n      timestamp,\n      cacheName: this._cacheName,\n      // Creating an ID from the URL and cache name won't be necessary once\n      // Edge switches to Chromium and all browsers we support work with\n      // array keyPaths.\n      id: this._getId(url)\n    };\n    await this._db.put(OBJECT_STORE_NAME, entry);\n  }\n  /**\n   * Returns the timestamp stored for a given URL.\n   *\n   * @param {string} url\n   * @return {number}\n   *\n   * @private\n   */\n\n\n  async getTimestamp(url) {\n    const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\n    return entry.timestamp;\n  }\n  /**\n   * Iterates through all the entries in the object store (from newest to\n   * oldest) and removes entries once either `maxCount` is reached or the\n   * entry's timestamp is less than `minTimestamp`.\n   *\n   * @param {number} minTimestamp\n   * @param {number} maxCount\n   * @return {Array<string>}\n   *\n   * @private\n   */\n\n\n  async expireEntries(minTimestamp, maxCount) {\n    const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\n      const store = txn.objectStore(OBJECT_STORE_NAME);\n      const request = store.index('timestamp').openCursor(null, 'prev');\n      const entriesToDelete = [];\n      let entriesNotDeletedCount = 0;\n\n      request.onsuccess = () => {\n        const cursor = request.result;\n\n        if (cursor) {\n          const result = cursor.value; // TODO(philipwalton): once we can use a multi-key index, we\n          // won't have to check `cacheName` here.\n\n          if (result.cacheName === this._cacheName) {\n            // Delete an entry if it's older than the max age or\n            // if we already have the max number allowed.\n            if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n              // TODO(philipwalton): we should be able to delete the\n              // entry right here, but doing so causes an iteration\n              // bug in Safari stable (fixed in TP). Instead we can\n              // store the keys of the entries to delete, and then\n              // delete the separate transactions.\n              // https://github.com/GoogleChrome/workbox/issues/1978\n              // cursor.delete();\n              // We only need to return the URL, not the whole entry.\n              entriesToDelete.push(cursor.value);\n            } else {\n              entriesNotDeletedCount++;\n            }\n          }\n\n          cursor.continue();\n        } else {\n          done(entriesToDelete);\n        }\n      };\n    }); // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n    // we should be able to remove this loop and do the entry deletion in the\n    // cursor loop above:\n    // https://github.com/GoogleChrome/workbox/issues/1978\n\n    const urlsDeleted = [];\n\n    for (const entry of entriesToDelete) {\n      await this._db.delete(OBJECT_STORE_NAME, entry.id);\n      urlsDeleted.push(entry.url);\n    }\n\n    return urlsDeleted;\n  }\n  /**\n   * Takes a URL and returns an ID that will be unique in the object store.\n   *\n   * @param {string} url\n   * @return {string}\n   *\n   * @private\n   */\n\n\n  _getId(url) {\n    // Creating an ID from the URL and cache name won't be necessary once\n    // Edge switches to Chromium and all browsers we support work with\n    // array keyPaths.\n    return this._cacheName + '|' + normalizeURL(url);\n  }\n\n}\n\nexport { CacheTimestampsModel };","map":{"version":3,"sources":["/Users/matthewcohen/Desktop/HTTBProject/HTTBFrontend/react-crud/node_modules/workbox-expiration/models/CacheTimestampsModel.js"],"names":["DBWrapper","deleteDatabase","DB_NAME","OBJECT_STORE_NAME","normalizeURL","unNormalizedUrl","url","URL","location","href","hash","CacheTimestampsModel","constructor","cacheName","_cacheName","_db","onupgradeneeded","event","_handleUpgrade","db","target","result","objStore","createObjectStore","keyPath","createIndex","unique","setTimestamp","timestamp","entry","id","_getId","put","getTimestamp","get","expireEntries","minTimestamp","maxCount","entriesToDelete","transaction","txn","done","store","objectStore","request","index","openCursor","entriesNotDeletedCount","onsuccess","cursor","value","push","continue","urlsDeleted","delete"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst OBJECT_STORE_NAME = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._cacheName = cacheName;\n        this._db = new DBWrapper(DB_NAME, 1, {\n            onupgradeneeded: (event) => this._handleUpgrade(event),\n        });\n    }\n    /**\n     * Should perform an upgrade of indexedDB.\n     *\n     * @param {Event} event\n     *\n     * @private\n     */\n    _handleUpgrade(event) {\n        const db = event.target.result;\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n        // Previous versions of `workbox-expiration` used `this._cacheName`\n        // as the IDBDatabase name.\n        deleteDatabase(this._cacheName);\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        await this._db.put(OBJECT_STORE_NAME, entry);\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\n        return entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\n            const store = txn.objectStore(OBJECT_STORE_NAME);\n            const request = store.index('timestamp').openCursor(null, 'prev');\n            const entriesToDelete = [];\n            let entriesNotDeletedCount = 0;\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    const result = cursor.value;\n                    // TODO(philipwalton): once we can use a multi-key index, we\n                    // won't have to check `cacheName` here.\n                    if (result.cacheName === this._cacheName) {\n                        // Delete an entry if it's older than the max age or\n                        // if we already have the max number allowed.\n                        if ((minTimestamp && result.timestamp < minTimestamp) ||\n                            (maxCount && entriesNotDeletedCount >= maxCount)) {\n                            // TODO(philipwalton): we should be able to delete the\n                            // entry right here, but doing so causes an iteration\n                            // bug in Safari stable (fixed in TP). Instead we can\n                            // store the keys of the entries to delete, and then\n                            // delete the separate transactions.\n                            // https://github.com/GoogleChrome/workbox/issues/1978\n                            // cursor.delete();\n                            // We only need to return the URL, not the whole entry.\n                            entriesToDelete.push(cursor.value);\n                        }\n                        else {\n                            entriesNotDeletedCount++;\n                        }\n                    }\n                    cursor.continue();\n                }\n                else {\n                    done(entriesToDelete);\n                }\n            };\n        });\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await this._db.delete(OBJECT_STORE_NAME, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n}\nexport { CacheTimestampsModel };\n"]},"metadata":{},"sourceType":"module"}