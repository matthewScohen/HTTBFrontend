{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\n\nclass StaleWhileRevalidate {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n\n    if (options.plugins) {\n      const isUsingCacheWillUpdate = options.plugins.some(plugin => !!plugin.cacheWillUpdate);\n      this._plugins = isUsingCacheWillUpdate ? options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  async handle({\n    event,\n    request\n  }) {\n    const logs = [];\n\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'StaleWhileRevalidate',\n        funcName: 'handle',\n        paramName: 'request'\n      });\n    }\n\n    const fetchAndCachePromise = this._getFromNetwork({\n      request,\n      event\n    });\n\n    let response = await cacheWrapper.match({\n      cacheName: this._cacheName,\n      request,\n      event,\n      matchOptions: this._matchOptions,\n      plugins: this._plugins\n    });\n    let error;\n\n    if (response) {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`Found a cached response in the '${this._cacheName}'` + ` cache. Will update with the network response in the background.`);\n      }\n\n      if (event) {\n        try {\n          event.waitUntil(fetchAndCachePromise);\n        } catch (error) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n          }\n        }\n      }\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`No response found in the '${this._cacheName}' cache. ` + `Will wait for the network response.`);\n      }\n\n      try {\n        response = await fetchAndCachePromise;\n      } catch (err) {\n        error = err;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\n\n      for (const log of logs) {\n        logger.log(log);\n      }\n\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url,\n        error\n      });\n    }\n\n    return response;\n  }\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n\n\n  async _getFromNetwork({\n    request,\n    event\n  }) {\n    const response = await fetchWrapper.fetch({\n      request,\n      event,\n      fetchOptions: this._fetchOptions,\n      plugins: this._plugins\n    });\n    const cachePutPromise = cacheWrapper.put({\n      cacheName: this._cacheName,\n      request,\n      response: response.clone(),\n      event,\n      plugins: this._plugins\n    });\n\n    if (event) {\n      try {\n        event.waitUntil(cachePutPromise);\n      } catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n        }\n      }\n    }\n\n    return response;\n  }\n\n}\n\nexport { StaleWhileRevalidate };","map":{"version":3,"sources":["/Users/matthewcohen/Desktop/HTTBProject/HTTBFrontend/react-crud/node_modules/workbox-strategies/StaleWhileRevalidate.js"],"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","cacheOkAndOpaquePlugin","StaleWhileRevalidate","constructor","options","_cacheName","getRuntimeName","cacheName","_plugins","plugins","isUsingCacheWillUpdate","some","plugin","cacheWillUpdate","_fetchOptions","fetchOptions","_matchOptions","matchOptions","handle","event","request","logs","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","fetchAndCachePromise","_getFromNetwork","response","match","error","push","waitUntil","warn","url","err","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","fetch","cachePutPromise","put","clone"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'StaleWhileRevalidate',\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = this._getFromNetwork({ request, event });\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n            if (event) {\n                try {\n                    event.waitUntil(fetchAndCachePromise);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork({ request, event }) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: response.clone(),\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n"]},"metadata":{},"sourceType":"module"}