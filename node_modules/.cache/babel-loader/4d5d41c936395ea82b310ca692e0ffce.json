{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\n\nexport function* generateURLVariations(url, {\n  ignoreURLParametersMatching,\n  directoryIndex,\n  cleanURLs,\n  urlManipulation\n} = {}) {\n  const urlObject = new URL(url, location.href);\n  urlObject.hash = '';\n  yield urlObject.href;\n  const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n  yield urlWithoutIgnoredParams.href;\n\n  if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n    const directoryURL = new URL(urlWithoutIgnoredParams.href);\n    directoryURL.pathname += directoryIndex;\n    yield directoryURL.href;\n  }\n\n  if (cleanURLs) {\n    const cleanURL = new URL(urlWithoutIgnoredParams.href);\n    cleanURL.pathname += '.html';\n    yield cleanURL.href;\n  }\n\n  if (urlManipulation) {\n    const additionalURLs = urlManipulation({\n      url: urlObject\n    });\n\n    for (const urlToAttempt of additionalURLs) {\n      yield urlToAttempt.href;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/matthewcohen/Desktop/HTTBProject/HTTBFrontend/react-crud/node_modules/workbox-precaching/utils/generateURLVariations.js"],"names":["removeIgnoredSearchParams","generateURLVariations","url","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","urlObject","URL","location","href","hash","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,yBAAT,QAA0C,gCAA1C;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,UAAUC,qBAAV,CAAgCC,GAAhC,EAAqC;AAAEC,EAAAA,2BAAF;AAA+BC,EAAAA,cAA/B;AAA+CC,EAAAA,SAA/C;AAA0DC,EAAAA;AAA1D,IAA+E,EAApH,EAAwH;AAC3H,QAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQN,GAAR,EAAaO,QAAQ,CAACC,IAAtB,CAAlB;AACAH,EAAAA,SAAS,CAACI,IAAV,GAAiB,EAAjB;AACA,QAAMJ,SAAS,CAACG,IAAhB;AACA,QAAME,uBAAuB,GAAGZ,yBAAyB,CAACO,SAAD,EAAYJ,2BAAZ,CAAzD;AACA,QAAMS,uBAAuB,CAACF,IAA9B;;AACA,MAAIN,cAAc,IAAIQ,uBAAuB,CAACC,QAAxB,CAAiCC,QAAjC,CAA0C,GAA1C,CAAtB,EAAsE;AAClE,UAAMC,YAAY,GAAG,IAAIP,GAAJ,CAAQI,uBAAuB,CAACF,IAAhC,CAArB;AACAK,IAAAA,YAAY,CAACF,QAAb,IAAyBT,cAAzB;AACA,UAAMW,YAAY,CAACL,IAAnB;AACH;;AACD,MAAIL,SAAJ,EAAe;AACX,UAAMW,QAAQ,GAAG,IAAIR,GAAJ,CAAQI,uBAAuB,CAACF,IAAhC,CAAjB;AACAM,IAAAA,QAAQ,CAACH,QAAT,IAAqB,OAArB;AACA,UAAMG,QAAQ,CAACN,IAAf;AACH;;AACD,MAAIJ,eAAJ,EAAqB;AACjB,UAAMW,cAAc,GAAGX,eAAe,CAAC;AAAEJ,MAAAA,GAAG,EAAEK;AAAP,KAAD,CAAtC;;AACA,SAAK,MAAMW,YAAX,IAA2BD,cAA3B,EAA2C;AACvC,YAAMC,YAAY,CAACR,IAAnB;AACH;AACJ;AACJ","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching, directoryIndex, cleanURLs, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}