{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\n\nclass CacheFirst {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  async handle({\n    event,\n    request\n  }) {\n    const logs = [];\n\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'CacheFirst',\n        funcName: 'makeRequest',\n        paramName: 'request'\n      });\n    }\n\n    let response = await cacheWrapper.match({\n      cacheName: this._cacheName,\n      request,\n      event,\n      matchOptions: this._matchOptions,\n      plugins: this._plugins\n    });\n    let error;\n\n    if (!response) {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`No response found in the '${this._cacheName}' cache. ` + `Will respond with a network request.`);\n      }\n\n      try {\n        response = await this._getFromNetwork(request, event);\n      } catch (err) {\n        error = err;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (response) {\n          logs.push(`Got response from network.`);\n        } else {\n          logs.push(`Unable to get a response from the network.`);\n        }\n      }\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`Found a cached response in the '${this._cacheName}' cache.`);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart('CacheFirst', request));\n\n      for (const log of logs) {\n        logger.log(log);\n      }\n\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url,\n        error\n      });\n    }\n\n    return response;\n  }\n  /**\n   * Handles the network and cache part of CacheFirst.\n   *\n   * @param {Request} request\n   * @param {Event} [event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n\n\n  async _getFromNetwork(request, event) {\n    const response = await fetchWrapper.fetch({\n      request,\n      event,\n      fetchOptions: this._fetchOptions,\n      plugins: this._plugins\n    }); // Keep the service worker while we put the request to the cache\n\n    const responseClone = response.clone();\n    const cachePutPromise = cacheWrapper.put({\n      cacheName: this._cacheName,\n      request,\n      response: responseClone,\n      event,\n      plugins: this._plugins\n    });\n\n    if (event) {\n      try {\n        event.waitUntil(cachePutPromise);\n      } catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n        }\n      }\n    }\n\n    return response;\n  }\n\n}\n\nexport { CacheFirst };","map":{"version":3,"sources":["/Users/matthewcohen/Desktop/HTTBProject/HTTBFrontend/react-crud/node_modules/workbox-strategies/CacheFirst.js"],"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","CacheFirst","constructor","options","_cacheName","getRuntimeName","cacheName","_plugins","plugins","_fetchOptions","fetchOptions","_matchOptions","matchOptions","handle","event","request","logs","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","response","match","error","push","_getFromNetwork","err","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","fetch","responseClone","clone","cachePutPromise","put","waitUntil","warn"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass CacheFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'CacheFirst',\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await this._getFromNetwork(request, event);\n            }\n            catch (err) {\n                error = err;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('CacheFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * Handles the network and cache part of CacheFirst.\n     *\n     * @param {Request} request\n     * @param {Event} [event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork(request, event) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        // Keep the service worker while we put the request to the cache\n        const responseClone = response.clone();\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: responseClone,\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n"]},"metadata":{},"sourceType":"module"}