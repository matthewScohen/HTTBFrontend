{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\nimport '../_version.js';\n/**\n * Adds a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * NOTE: when called more than once this method will replace the previously set\n * configuration options. Calling it more than once is not recommended outside\n * of tests.\n *\n * @private\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n */\n\nexport const addFetchListener = ({\n  ignoreURLParametersMatching = [/^utm_/],\n  directoryIndex = 'index.html',\n  cleanURLs = true,\n  urlManipulation\n} = {}) => {\n  const cacheName = cacheNames.getPrecacheName(); // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n\n  self.addEventListener('fetch', event => {\n    const precachedURL = getCacheKeyForURL(event.request.url, {\n      cleanURLs,\n      directoryIndex,\n      ignoreURLParametersMatching,\n      urlManipulation\n    });\n\n    if (!precachedURL) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`Precaching did not find a match for ` + getFriendlyURL(event.request.url));\n      }\n\n      return;\n    }\n\n    let responsePromise = self.caches.open(cacheName).then(cache => {\n      return cache.match(precachedURL);\n    }).then(cachedResponse => {\n      if (cachedResponse) {\n        return cachedResponse;\n      } // Fall back to the network if we don't have a cached response\n      // (perhaps due to manual cache cleanup).\n\n\n      if (process.env.NODE_ENV !== 'production') {\n        logger.warn(`The precached response for ` + `${getFriendlyURL(precachedURL)} in ${cacheName} was not found. ` + `Falling back to the network instead.`);\n      }\n\n      return fetch(precachedURL);\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      responsePromise = responsePromise.then(response => {\n        // Workbox is going to handle the route.\n        // print the routing details to the console.\n        logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(event.request.url));\n        logger.log(`Serving the precached url: ${precachedURL}`);\n        logger.groupCollapsed(`View request details here.`);\n        logger.log(event.request);\n        logger.groupEnd();\n        logger.groupCollapsed(`View response details here.`);\n        logger.log(response);\n        logger.groupEnd();\n        logger.groupEnd();\n        return response;\n      });\n    }\n\n    event.respondWith(responsePromise);\n  });\n};","map":{"version":3,"sources":["/Users/matthewcohen/Desktop/HTTBProject/HTTBFrontend/react-crud/node_modules/workbox-precaching/utils/addFetchListener.js"],"names":["cacheNames","getFriendlyURL","logger","getCacheKeyForURL","addFetchListener","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","cacheName","getPrecacheName","self","addEventListener","event","precachedURL","request","url","process","env","NODE_ENV","debug","responsePromise","caches","open","then","cache","match","cachedResponse","warn","fetch","response","groupCollapsed","log","groupEnd","respondWith"],"mappings":"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","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\nimport '../_version.js';\n/**\n * Adds a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * NOTE: when called more than once this method will replace the previously set\n * configuration options. Calling it more than once is not recommended outside\n * of tests.\n *\n * @private\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n */\nexport const addFetchListener = ({ ignoreURLParametersMatching = [/^utm_/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) => {\n    const cacheName = cacheNames.getPrecacheName();\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('fetch', ((event) => {\n        const precachedURL = getCacheKeyForURL(event.request.url, {\n            cleanURLs,\n            directoryIndex,\n            ignoreURLParametersMatching,\n            urlManipulation,\n        });\n        if (!precachedURL) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` +\n                    getFriendlyURL(event.request.url));\n            }\n            return;\n        }\n        let responsePromise = self.caches.open(cacheName).then((cache) => {\n            return cache.match(precachedURL);\n        }).then((cachedResponse) => {\n            if (cachedResponse) {\n                return cachedResponse;\n            }\n            // Fall back to the network if we don't have a cached response\n            // (perhaps due to manual cache cleanup).\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(precachedURL)} in ${cacheName} was not found. ` +\n                    `Falling back to the network instead.`);\n            }\n            return fetch(precachedURL);\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            responsePromise = responsePromise.then((response) => {\n                // Workbox is going to handle the route.\n                // print the routing details to the console.\n                logger.groupCollapsed(`Precaching is responding to: ` +\n                    getFriendlyURL(event.request.url));\n                logger.log(`Serving the precached url: ${precachedURL}`);\n                logger.groupCollapsed(`View request details here.`);\n                logger.log(event.request);\n                logger.groupEnd();\n                logger.groupCollapsed(`View response details here.`);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n                return response;\n            });\n        }\n        event.respondWith(responsePromise);\n    }));\n};\n"]},"metadata":{},"sourceType":"module"}