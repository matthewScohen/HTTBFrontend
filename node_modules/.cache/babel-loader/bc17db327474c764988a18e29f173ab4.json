{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in the Workbox APIs to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * Whenever a cached request is used or updated, this plugin will look\n * at the used Cache and remove any old or extra requests.\n *\n * When using `maxAgeSeconds`, requests may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached request has been used. If the request has a \"Date\" header, then\n * a light weight expiration check is performed and the request will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof module:workbox-expiration\n */\n\nclass ExpirationPlugin {\n  /**\n   * @param {Object} config\n   * @param {number} [config.maxEntries] The maximum number of entries to cache.\n   * Entries used the least will be removed as the maximum is reached.\n   * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n   * it's treated as stale and removed.\n   * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n   * automatic deletion if the available storage quota has been exceeded.\n   */\n  constructor(config = {}) {\n    /**\n     * A \"lifecycle\" callback that will be triggered automatically by the\n     * `workbox-strategies` handlers when a `Response` is about to be returned\n     * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n     * the handler. It allows the `Response` to be inspected for freshness and\n     * prevents it from being used if the `Response`'s `Date` header value is\n     * older than the configured `maxAgeSeconds`.\n     *\n     * @param {Object} options\n     * @param {string} options.cacheName Name of the cache the response is in.\n     * @param {Response} options.cachedResponse The `Response` object that's been\n     *     read from a cache and whose freshness should be checked.\n     * @return {Response} Either the `cachedResponse`, if it's\n     *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n     *\n     * @private\n     */\n    this.cachedResponseWillBeUsed = async ({\n      event,\n      request,\n      cacheName,\n      cachedResponse\n    }) => {\n      if (!cachedResponse) {\n        return null;\n      }\n\n      const isFresh = this._isResponseDateFresh(cachedResponse); // Expire entries to ensure that even if the expiration date has\n      // expired, it'll only be used once.\n\n\n      const cacheExpiration = this._getCacheExpiration(cacheName);\n\n      dontWaitFor(cacheExpiration.expireEntries()); // Update the metadata for the request URL to the current timestamp,\n      // but don't `await` it as we don't want to block the response.\n\n      const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n\n      if (event) {\n        try {\n          event.waitUntil(updateTimestampDone);\n        } catch (error) {\n          if (process.env.NODE_ENV !== 'production') {\n            // The event may not be a fetch event; only log the URL if it is.\n            if ('request' in event) {\n              logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache entry for ` + `'${getFriendlyURL(event.request.url)}'.`);\n            }\n          }\n        }\n      }\n\n      return isFresh ? cachedResponse : null;\n    };\n    /**\n     * A \"lifecycle\" callback that will be triggered automatically by the\n     * `workbox-strategies` handlers when an entry is added to a cache.\n     *\n     * @param {Object} options\n     * @param {string} options.cacheName Name of the cache that was updated.\n     * @param {string} options.request The Request for the cached entry.\n     *\n     * @private\n     */\n\n\n    this.cacheDidUpdate = async ({\n      cacheName,\n      request\n    }) => {\n      if (process.env.NODE_ENV !== 'production') {\n        assert.isType(cacheName, 'string', {\n          moduleName: 'workbox-expiration',\n          className: 'Plugin',\n          funcName: 'cacheDidUpdate',\n          paramName: 'cacheName'\n        });\n        assert.isInstance(request, Request, {\n          moduleName: 'workbox-expiration',\n          className: 'Plugin',\n          funcName: 'cacheDidUpdate',\n          paramName: 'request'\n        });\n      }\n\n      const cacheExpiration = this._getCacheExpiration(cacheName);\n\n      await cacheExpiration.updateTimestamp(request.url);\n      await cacheExpiration.expireEntries();\n    };\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(config.maxEntries || config.maxAgeSeconds)) {\n        throw new WorkboxError('max-entries-or-age-required', {\n          moduleName: 'workbox-expiration',\n          className: 'Plugin',\n          funcName: 'constructor'\n        });\n      }\n\n      if (config.maxEntries) {\n        assert.isType(config.maxEntries, 'number', {\n          moduleName: 'workbox-expiration',\n          className: 'Plugin',\n          funcName: 'constructor',\n          paramName: 'config.maxEntries'\n        });\n      }\n\n      if (config.maxAgeSeconds) {\n        assert.isType(config.maxAgeSeconds, 'number', {\n          moduleName: 'workbox-expiration',\n          className: 'Plugin',\n          funcName: 'constructor',\n          paramName: 'config.maxAgeSeconds'\n        });\n      }\n    }\n\n    this._config = config;\n    this._maxAgeSeconds = config.maxAgeSeconds;\n    this._cacheExpirations = new Map();\n\n    if (config.purgeOnQuotaError) {\n      registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n    }\n  }\n  /**\n   * A simple helper method to return a CacheExpiration instance for a given\n   * cache name.\n   *\n   * @param {string} cacheName\n   * @return {CacheExpiration}\n   *\n   * @private\n   */\n\n\n  _getCacheExpiration(cacheName) {\n    if (cacheName === cacheNames.getRuntimeName()) {\n      throw new WorkboxError('expire-custom-caches-only');\n    }\n\n    let cacheExpiration = this._cacheExpirations.get(cacheName);\n\n    if (!cacheExpiration) {\n      cacheExpiration = new CacheExpiration(cacheName, this._config);\n\n      this._cacheExpirations.set(cacheName, cacheExpiration);\n    }\n\n    return cacheExpiration;\n  }\n  /**\n   * @param {Response} cachedResponse\n   * @return {boolean}\n   *\n   * @private\n   */\n\n\n  _isResponseDateFresh(cachedResponse) {\n    if (!this._maxAgeSeconds) {\n      // We aren't expiring by age, so return true, it's fresh\n      return true;\n    } // Check if the 'date' header will suffice a quick expiration check.\n    // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n    // discussion.\n\n\n    const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n\n    if (dateHeaderTimestamp === null) {\n      // Unable to parse date, so assume it's fresh.\n      return true;\n    } // If we have a valid headerTime, then our response is fresh iff the\n    // headerTime plus maxAgeSeconds is greater than the current time.\n\n\n    const now = Date.now();\n    return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n  }\n  /**\n   * This method will extract the data header and parse it into a useful\n   * value.\n   *\n   * @param {Response} cachedResponse\n   * @return {number|null}\n   *\n   * @private\n   */\n\n\n  _getDateHeaderTimestamp(cachedResponse) {\n    if (!cachedResponse.headers.has('date')) {\n      return null;\n    }\n\n    const dateHeader = cachedResponse.headers.get('date');\n    const parsedDate = new Date(dateHeader);\n    const headerTime = parsedDate.getTime(); // If the Date header was invalid for some reason, parsedDate.getTime()\n    // will return NaN.\n\n    if (isNaN(headerTime)) {\n      return null;\n    }\n\n    return headerTime;\n  }\n  /**\n   * This is a helper method that performs two operations:\n   *\n   * - Deletes *all* the underlying Cache instances associated with this plugin\n   * instance, by calling caches.delete() on your behalf.\n   * - Deletes the metadata from IndexedDB used to keep track of expiration\n   * details for each Cache instance.\n   *\n   * When using cache expiration, calling this method is preferable to calling\n   * `caches.delete()` directly, since this will ensure that the IndexedDB\n   * metadata is also cleanly removed and open IndexedDB instances are deleted.\n   *\n   * Note that if you're *not* using cache expiration for a given cache, calling\n   * `caches.delete()` and passing in the cache's name should be sufficient.\n   * There is no Workbox-specific method needed for cleanup in that case.\n   */\n\n\n  async deleteCacheAndMetadata() {\n    // Do this one at a time instead of all at once via `Promise.all()` to\n    // reduce the chance of inconsistency if a promise rejects.\n    for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n      await self.caches.delete(cacheName);\n      await cacheExpiration.delete();\n    } // Reset this._cacheExpirations to its initial state.\n\n\n    this._cacheExpirations = new Map();\n  }\n\n}\n\nexport { ExpirationPlugin };","map":{"version":3,"sources":["/Users/matthewcohen/Desktop/HTTBProject/HTTBFrontend/react-crud/node_modules/workbox-expiration/ExpirationPlugin.js"],"names":["assert","cacheNames","dontWaitFor","getFriendlyURL","logger","registerQuotaErrorCallback","WorkboxError","CacheExpiration","ExpirationPlugin","constructor","config","cachedResponseWillBeUsed","event","request","cacheName","cachedResponse","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","expireEntries","updateTimestampDone","updateTimestamp","url","waitUntil","error","process","env","NODE_ENV","warn","cacheDidUpdate","isType","moduleName","className","funcName","paramName","isInstance","Request","maxEntries","maxAgeSeconds","_config","_maxAgeSeconds","_cacheExpirations","Map","purgeOnQuotaError","deleteCacheAndMetadata","getRuntimeName","get","set","dateHeaderTimestamp","_getDateHeaderTimestamp","now","Date","headers","has","dateHeader","parsedDate","headerTime","getTime","isNaN","self","caches","delete"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in the Workbox APIs to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * Whenever a cached request is used or updated, this plugin will look\n * at the used Cache and remove any old or extra requests.\n *\n * When using `maxAgeSeconds`, requests may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached request has been used. If the request has a \"Date\" header, then\n * a light weight expiration check is performed and the request will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof module:workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - (this._maxAgeSeconds * 1000);\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n"]},"metadata":{},"sourceType":"module"}