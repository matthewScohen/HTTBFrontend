{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof module:workbox-precaching\n */\n\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n  const cacheNames = await self.caches.keys();\n  const cacheNamesToDelete = cacheNames.filter(cacheName => {\n    return cacheName.includes(substringToFind) && cacheName.includes(self.registration.scope) && cacheName !== currentPrecacheName;\n  });\n  await Promise.all(cacheNamesToDelete.map(cacheName => self.caches.delete(cacheName)));\n  return cacheNamesToDelete;\n};\n\nexport { deleteOutdatedCaches };","map":{"version":3,"sources":["/Users/matthewcohen/Desktop/HTTBProject/HTTBFrontend/react-crud/node_modules/workbox-precaching/utils/deleteOutdatedCaches.js"],"names":["SUBSTRING_TO_FIND","deleteOutdatedCaches","currentPrecacheName","substringToFind","cacheNames","self","caches","keys","cacheNamesToDelete","filter","cacheName","includes","registration","scope","Promise","all","map","delete"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAP;AACA,MAAMA,iBAAiB,GAAG,YAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAG,OAAOC,mBAAP,EAA4BC,eAAe,GAAGH,iBAA9C,KAAoE;AAC7F,QAAMI,UAAU,GAAG,MAAMC,IAAI,CAACC,MAAL,CAAYC,IAAZ,EAAzB;AACA,QAAMC,kBAAkB,GAAGJ,UAAU,CAACK,MAAX,CAAmBC,SAAD,IAAe;AACxD,WAAOA,SAAS,CAACC,QAAV,CAAmBR,eAAnB,KACHO,SAAS,CAACC,QAAV,CAAmBN,IAAI,CAACO,YAAL,CAAkBC,KAArC,CADG,IAEHH,SAAS,KAAKR,mBAFlB;AAGH,GAJ0B,CAA3B;AAKA,QAAMY,OAAO,CAACC,GAAR,CAAYP,kBAAkB,CAACQ,GAAnB,CAAwBN,SAAD,IAAeL,IAAI,CAACC,MAAL,CAAYW,MAAZ,CAAmBP,SAAnB,CAAtC,CAAZ,CAAN;AACA,SAAOF,kBAAP;AACH,CATD;;AAUA,SAASP,oBAAT","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName;\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n"]},"metadata":{},"sourceType":"module"}